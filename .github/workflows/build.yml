name: Build

on:
  push:
  repository_dispatch:
  workflow_dispatch:
  schedule:
    - cron: "0 0 * * 0"

env:
  # list of platforms supported by our base image nginx:alpine
  architectures: '[\"linux/amd64\", \"linux/arm/v6\", \"linux/arm/v7\", \"linux/arm64/v8\", \"linux/ppc64le\", \"linux/s390x\"]'

jobs:
  cancel_redundant:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

  # This dumb job exists because env isn't available in the matrix context, sigh
  # At least it lets me do some string manipulation with jq, which is always fun
  # https://docs.github.com/en/actions/learn-github-actions/expressions#fromjson
  vars:
    name: Set Env Vars
    runs-on: ubuntu-latest
    outputs:
      architectures: ${{ steps.set.outputs.architectures }}
      image_list: ${{ steps.set.outputs.image_list }}
    steps:
      # Matricies don't support outputting variables from each run in the matrix, so we work out what the
      #  image tags are going to be in advance and pass them to the build job
      - name: Set Env Vars
        id: set
        run: |
          tag_prefix="${{ github.sha }}"
          full_image_prefix="makeshift27015/nginx-alpine-amplify:${tag_prefix}"
          architectures=$(echo ${{ env.architectures }} | \
            jq -c --arg tag_prefix "$tag_prefix" --arg full_image_prefix "$full_image_prefix" \
              'map((. | gsub("(/)";"_")) as $underscored | {
                slashed: ., 
                underscored: $underscored, 
                image_name: ($tag_prefix + "-" + $underscored), 
                full_image_name: ($full_image_prefix + "-" + $underscored) }
              )
            '
          )
          image_list=$(echo "$architectures" | jq -r '[.[] | .full_image_name] | join(",")')
          echo "::set-output name=architectures::$architectures"
          echo "::set-output name=image_list::$image_list"

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: vars
    strategy:
      matrix:
        architecture: ${{ fromJson(needs.vars.outputs.architectures) }}
    steps:
      - name: Checkout (nginx-alpine-amplify/${{ matrix.architecture.slashed }})
        uses: actions/checkout@v2

      - name: Set up QEMU (nginx-alpine-amplify/${{ matrix.architecture.slashed }})
        id: qemu
        uses: docker/setup-qemu-action@v1.2.0
        with:
          image: tonistiigi/binfmt:latest
          platforms: all

      - name: Set up Docker Buildx (nginx-alpine-amplify/${{ matrix.architecture.slashed }})
        id: buildx
        uses: docker/setup-buildx-action@v1.6.0

      - name: Inspect builder (nginx-alpine-amplify/${{ matrix.architecture.slashed }})
        run: |
          echo "Name:      ${{ steps.buildx.outputs.name }}"
          echo "Endpoint:  ${{ steps.buildx.outputs.endpoint }}"
          echo "Status:    ${{ steps.buildx.outputs.status }}"
          echo "Flags:     ${{ steps.buildx.outputs.flags }}"
          echo "Platforms: ${{ steps.buildx.outputs.platforms }}"
      - name: Login to DockerHub
        if: success()
        uses: docker/login-action@v1.14.1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # nginx-alpine-amplify
      - name: Docker meta (nginx-alpine-amplify/${{ matrix.architecture.slashed }})
        id: meta-conf
        uses: docker/metadata-action@v3.7.0
        with:
          images: makeshift27015/nginx-alpine-amplify
          tags: |
            type=raw,value=${{ matrix.architecture.image_name }}

      - name: Push Container (nginx-alpine-amplify/${{ matrix.architecture.slashed }})
        if: success()
        uses: docker/build-push-action@v2.10.0
        with:
          tags: ${{ steps.meta-conf.outputs.tags }}
          labels: ${{ steps.meta-conf.outputs.labels }}
          platforms: ${{ matrix.architecture.slashed }}
          builder: ${{ steps.buildx.outputs.name }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: true
          pull: true

  build_manifest:
    name: Build Final Manifest (nginx-alpine-amplify)
    needs:
      - build
      - vars
    runs-on: ubuntu-latest
    steps:
      - name: Docker meta for manifest (nginx-alpine-amplify)
        id: meta-conf
        uses: docker/metadata-action@v3.7.0
        with:
          images: makeshift27015/nginx-alpine-amplify
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha,prefix=
            type=sha,prefix=,format=long
            # set latest tag for master branch
            type=raw,value=latest,enable=${{ github.ref_name == 'master' }}

      - run: echo ${{ needs.vars.outputs.image_list }} && echo ${{ steps.meta-conf.outputs.tags }}

      - name: Create and push manifest images
        # This only accepts one tag :/
        uses: Noelware/docker-manifest-action@v0.1.0
        with:
          base-image: ${{ steps.meta-conf.outputs.tags[0] }}
          extra-images: ${{ needs.vars.outputs.image_list }}
          push: true

  docs:
    name: Update DockerHub Repo Description (nginx-alpine-amplify)
    runs-on: ubuntu-latest
    needs: build_manifest
    if: success() && github.ref_name == 'master'
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update DockerHub Repo Description (nginx-alpine-amplify)
        uses: peter-evans/dockerhub-description@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}
          repository: makeshift27015/nginx-alpine-amplify
          readme-filepath: Readme.md
          short-description: "Nginx on Alpine with Amplify included, because Nginx itself doesn't offer that"
